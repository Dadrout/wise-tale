# Ultra-fast development docker-compose with BuildKit optimization
# Uses multi-stage builds, cache mounts, and dev targets for maximum speed

services:
  backend:
    build:
      context: ./wisetale-api
      target: dev  # Use dev stage with hot reload
      cache_from:
        - wisetale-backend:dev
        - wisetale-backend:latest
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: wisetale-backend:dev  # Tag for better cache reuse
    container_name: wisetale-backend-dev
    env_file:
      - ./wisetale-api/.env
    ports:
      - "8000:8000"
    volumes:
      # Mount only the app directory, not the entire project
      - ./wisetale-api/app:/app/app
      # Preserve the virtual environment from the build
      - backend_venv:/app/.venv
      # Mount specific config files for hot reload
      - ./wisetale-api/pyproject.toml:/app/pyproject.toml:ro
      # Exclude cache directories to avoid conflicts
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - REDIS_URL=redis://localhost:6379
      - VIRTUAL_ENV=/app/.venv
      - PATH=/app/.venv/bin:$PATH
      - DOCKER_BUILDKIT=1  # Enable BuildKit

  frontend:
    build:
      context: ./wisetale-app
      target: dev  # Use dev stage
      cache_from:
        - wisetale-frontend:dev
        - wisetale-frontend:latest
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: wisetale-frontend:dev  # Tag for better cache reuse
    container_name: wisetale-frontend-dev
    ports:
      - "3001:3001"
    volumes:
      - ./wisetale-app:/app
      - frontend_node_modules:/app/node_modules  # Cache node_modules
      # Exclude build artifacts
      - /app/.next
    environment:
      - DOCKER_BUILDKIT=1  # Enable BuildKit

volumes:
  backend_venv:
    driver: local
  frontend_node_modules:
    driver: local 