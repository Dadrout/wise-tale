#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"

def test_ai_image_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —Å AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —Å AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ Hugging Face")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_data = {
        "subject": "history",
        "topic": "Ancient Egypt",
        "persona": "narrator",
        "language": "en",
        "user_id": 1
    }
    
    print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:")
    print(f"   –¢–µ–º–∞: {test_data['topic']}")
    print(f"   –ü—Ä–µ–¥–º–µ—Ç: {test_data['subject']}")
    print()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{API_BASE_URL}/api/v1/generate",
            json=test_data,
            timeout=120  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            print(f"üé¨ –í–∏–¥–µ–æ URL: {result.get('video_url', 'N/A')}")
            print(f"üéµ –ê—É–¥–∏–æ URL: {result.get('audio_url', 'N/A')}")
            print(f"üìñ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {result.get('transcript', 'N/A')[:100]}...")
            print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(result.get('images_used', []))}):")
            
            for i, img in enumerate(result.get('images_used', [])[:3]):
                print(f"   {i+1}. {img}")
            
            if len(result.get('images_used', [])) > 3:
                print(f"   ... –∏ –µ—â–µ {len(result.get('images_used', [])) - 3} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
            print(f"üÜî ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('id', 'N/A')}")
            print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {result.get('created_at', 'N/A')}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")
    except requests.exceptions.ConnectionError:
        print("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_async_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ tasks API"""
    
    print("\n" + "=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /tasks API")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_data = {
        "subject": "geography", 
        "topic": "Amazon Rainforest",
        "level": "beginner",
        "user_id": 1
    }
    
    print(f"üìù –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É:")
    print(f"   –¢–µ–º–∞: {test_data['topic']}")
    print(f"   –ü—Ä–µ–¥–º–µ—Ç: {test_data['subject']}")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        response = requests.post(
            f"{API_BASE_URL}/api/v1/tasks/generate",
            json=test_data
        )
        
        if response.status_code == 200:
            task_info = response.json()
            task_id = task_info.get('task_id')
            
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
            print("‚è≥ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            for attempt in range(30):  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
                time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
                
                status_response = requests.get(f"{API_BASE_URL}/api/v1/tasks/{task_id}")
                
                if status_response.status_code == 200:
                    status = status_response.json()
                    progress = status.get('progress', 0)
                    message = status.get('message', '')
                    task_status = status.get('status', '')
                    
                    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}% - {message}")
                    
                    if task_status == 'completed':
                        result = status.get('result', {})
                        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        print(f"üé¨ –í–∏–¥–µ–æ: {result.get('video_url', 'N/A')}")
                        print(f"üéµ –ê—É–¥–∏–æ: {result.get('audio_url', 'N/A')}")
                        print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result.get('images_used', []))}")
                        break
                    elif task_status == 'failed':
                        error = status.get('error', 'Unknown error')
                        print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {error}")
                        break
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                    break
            else:
                print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def main():
    """Main function to run the test."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Wizetale API —Å AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # --- Configuration ---
    BASE_URL = "http://localhost:8000/api/v1"
    print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\n----------------------------------------")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ wizetale-api/generated_*/")
    print("----------------------------------------\n")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Wizetale API —Å AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not check_api_health():
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω:")
        print("   cd wizetale-api")
        print("   source .venv/bin/activate")
        print("   uvicorn app.main:app --reload")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_ai_image_generation()
    test_async_generation()
    
    print("\n" + "=" * 60)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ wizetale-api/generated_*/") 